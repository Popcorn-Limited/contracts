// SPDX-License-Identifier: GPL-3.0
// Docgen-SOLC: 0.8.15

pragma solidity ^0.8.15;

import {Test, console, console2} from "forge-std/Test.sol";
import {IERC4626, IERC20} from "openzeppelin-contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol";

struct CallStruct {
    address target;
    bytes data;
}

event LogBytes4(bytes4);

contract Tester is Test {
    CallStruct[] public callStructs;
    function setUp() public {}

    function test__stuff() public {
        callStructs.push(CallStruct(address(1), bytes("abcd")));
        callStructs.push(CallStruct(address(2), bytes("efgh")));

        bytes memory data = abi.encode(bytes("123"), callStructs);

        (bytes memory stuff, CallStruct[] memory calls) = abi.decode(
            data,
            (bytes, CallStruct[])
        );

        assertEq(stuff, "123");
        assertEq(calls.length, 2);
        assertEq(calls[0].target, address(1));
        assertEq(calls[1].target, address(2));
        assertEq(calls[0].data, bytes("abcd"));
        assertEq(calls[1].data, bytes("efgh"));

        bytes
            memory data2 = hex"12599ac600000000000000000000000022f5413c075ccd56d575a54763831c4c27a37bdb000000000000000000000000cae62858db831272a03768f5844cbe1b40bb381f0000000000000000000000000000000000000000000000000000000000012b2d0000000000000000000000000000000000000000000000000000000000004e07000000000000000000000000000000000000000000000000000000000000a3dc0000000000000000000000000000000000000000000000000000000000009c0f000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002800000000000000000000000008236a87084f8b84306f72007f36f2618a563449400000000000000000000000000000000000000000000000000000000000271000000000000000000000000008236a87084f8b84306f72007f36f2618a5634494000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        emit LogBytes4(bytes4(data2));
    }
}
