// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {stdJson} from "forge-std/StdJson.sol";

import {ERC4626Upgradeable, IERC20, IERC20Metadata, ERC20Upgradeable as ERC20} from "openzeppelin-contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol";

contract Executor {
    function approve(address to, address spender, uint256 amount) external {
        IERC20(to).approve(spender, amount);
    }
    function execute(address to, bytes memory data, uint256 value) external {
        (bool success, bytes memory returnData) = to.call{value: value}(data);
    }
}

contract Tester is Test {
    Executor executor;

    function setUp() public {
        vm.selectFork(vm.createFork("mainnet"));
        executor = new Executor();
        emit log_address(address(executor));
    }

    function testA() public {
        uint256 amount = 1000000000000000000;

        deal(
            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,
            address(executor),
            amount
        );

        executor.approve(
            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,
            0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E,
            amount
        );
        executor.execute(
            0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E,
            hex"b35d7e73000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000007095ea7b3010001ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc219198595a30283ffffffff836352a56caadc4f1e25cd6c75970fa768a3304e649bd3b227018302ffffffff036675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200103ffffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0ba9059cbb010403ffffffffff6b175474e89094c44da98b954eedeac495271d0f6e7a43a3010305ffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120103ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000006352a56caadc4f1e25cd6c75970fa768a3304e6400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4bc80f1a80000000000000000000000007d585b0e27bbb3d981b7757115ec11f47c4769940000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000c88bdbde70fa15878e0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000180012c00000000000000000060594a405d53811d3bc4766596efd80fd545a2700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000c88bdbde70fa15878d",
            0
        );

        emit log_uint(
            IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F).balanceOf(
                address(executor)
            )
        );
        emit log_uint(
            IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).balanceOf(
                address(executor)
            )
        );
    }
}
