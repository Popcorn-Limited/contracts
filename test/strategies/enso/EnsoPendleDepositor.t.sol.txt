// @DEV -- !!! THIS STRATEGY DOESNT WORK CURRENTLY SINCE THE ENSO API DOESNT RETURN CORRECT DATA

// SPDX-License-Identifier: GPL-3.0
// Docgen-SOLC: 0.8.0
pragma solidity ^0.8.25;

import {EnsoDepositor, IERC20} from "src/strategies/EnsoDepositor.sol";
import {BaseStrategyTest, IBaseStrategy, TestConfig, stdJson} from "../BaseStrategyTest.sol";
import {PendleLpOracle} from "src/peripheral/oracles/adapter/PendleLpOracle.sol";
import {UniswapV3Oracle} from "src/peripheral/oracles/adapter/UniswapV3Oracle.sol";
import {CrossOracle, OracleStep} from "src/peripheral/oracles/adapter/CrossOracle.sol";

contract EnsoPendleDepositorTest is BaseStrategyTest {
    using stdJson for string;

    address vaultAsset = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address underlying = 0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7;
    address lpToken = 0x4f43c77872Db6BA177c270986CD30c3381AF37Ee;
    address ensoRouter = 0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E;

    bytes depositData =
        hex"b35d7e73000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000013095ea7b3010001ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2414bf3894100000000000007e592427a0aece92de3edee1f18e0157c058615640203040506010708ffffffffffffffffffffffffffffffffffffffffffffffff095ea7b3010008ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2095ea7b3010907ffffffffffa1290d69c65a6fe4df752f95823fae25cb99e5a720e8c5650105030708ffff07730a5e2acebccaa5e9095723b3cb862739da793c5b42f5e3810a07ffffffff05263833d47ea3fa4a30f269323aba6a107f9eb14c9bd3b22701850bffffffff056675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200105ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0b4bf6a8f001050cffffffff0cd0af6f692bfa10d6a535a3a321dc8377f4eeef124bf6a8f001050dffffffff0dd0af6f692bfa10d6a535a3a321dc8377f4eeef12095ea7b3010e07ffffffffff730a5e2acebccaa5e9095723b3cb862739da793c70a08231010fffffffffff0e4f43c77872db6ba177c270986cd30c3381af37ee58bda475c1000000000000ff00000000005bbb0ef59571e58418f9a4357b68a00f0a07080c0d05101192ffffffffffffffffffffffffffffffffffffffffffff70a08231010fffffffffff0f4f43c77872db6ba177c270986cd30c3381af37eeb67d77c5010f0effffffff0fca99eaa38e8f37a168214a3a57c9a45a58563ed56e7a43a3010f13ffffffff0f7e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c5912010fffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a1290d69c65a6fe4df752f95823fae25cb99e5a7000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000200000000000000000000000007d585b0e27bbb3d981b7757115ec11f47c476994000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000666c32c300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000001aa5e3e1730a680d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000730a5e2acebccaa5e9095723b3cb862739da793c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004f43c77872db6ba177c270986cd30c3381af37ee00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000025e400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002cec000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d2f6b5741b7d7a7";

    bytes withdrawalData =
        hex"b35d7e730000000000000000000000004f43c77872db6ba177c270986cd30c3381af37ee0000000000000000000000000000000000000000000000000d97d04f660f578c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000008095ea7b3010001ffffffffff4f43c77872db6ba177c270986cd30c3381af37ee19198595a30283ffffffff83111111125421ca6dc452d289314280a0f8842a659bd3b227018302ffffffff036675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200103ffffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0bd0e30db00303ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2a9059cbb010403ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc26e7a43a3010305ffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120103ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d97d04f660f578c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001889fda64bd5b835003ba43fe2a08ab2d979146bfd73e8d800a5dfdbb3260d607ec095f211c000000000000000000000000acea270e1742dd5639c34c9c37563ee4fd3364a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000004f43c77872db6ba177c270986cd30c3381af37ee0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000001101d0d724fa8ccd84400000000000000000000000000000000006673f6f5000000000000000000007e839a71a24e2fb5866097a8176dba334dd7eda0719faf290cf049342deeb35b9fa96291b4d3f3b8b3935f3aa30b3c077f3a1aa1a03d9f6918d24b53acf9b8a30000000000000000000000000000000000000000000000000d97d04f660f578c60000000000000000000000000000000000000000000000000ac2579712cf5ba97864b9100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000ac2579712cf5ba";

    bytes partialDepositData =
        hex"b35d7e73000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000013095ea7b3010001ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2414bf3894100000000000007e592427a0aece92de3edee1f18e0157c058615640203040506010708ffffffffffffffffffffffffffffffffffffffffffffffff095ea7b3010008ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2095ea7b3010907ffffffffffa1290d69c65a6fe4df752f95823fae25cb99e5a720e8c5650105030708ffff07730a5e2acebccaa5e9095723b3cb862739da793c5b42f5e3810a07ffffffff05263833d47ea3fa4a30f269323aba6a107f9eb14c9bd3b22701850bffffffff056675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200105ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0b4bf6a8f001050cffffffff0cd0af6f692bfa10d6a535a3a321dc8377f4eeef124bf6a8f001050dffffffff0dd0af6f692bfa10d6a535a3a321dc8377f4eeef12095ea7b3010e07ffffffffff730a5e2acebccaa5e9095723b3cb862739da793c70a08231010fffffffffff0e4f43c77872db6ba177c270986cd30c3381af37ee58bda475c1000000000000ff00000000005bbb0ef59571e58418f9a4357b68a00f0a07080c0d05101192ffffffffffffffffffffffffffffffffffffffffffff70a08231010fffffffffff0f4f43c77872db6ba177c270986cd30c3381af37eeb67d77c5010f0effffffff0fca99eaa38e8f37a168214a3a57c9a45a58563ed56e7a43a3010f13ffffffff0f7e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c5912010fffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a1290d69c65a6fe4df752f95823fae25cb99e5a7000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000200000000000000000000000007d585b0e27bbb3d981b7757115ec11f47c476994000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000666c32ff00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d52f45cf0beabcd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000730a5e2acebccaa5e9095723b3cb862739da793c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004f43c77872db6ba177c270986cd30c3381af37ee00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000025e400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002cec000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000697b90717738378";

    function setUp() public {
        _setUpBaseTest(
            0,
            "./test/strategies/enso/EnsoPendleDepositorTestConfig.json"
        );
    }

    function _setUpStrategy(
        string memory json_,
        string memory index_,
        TestConfig memory testConfig_
    ) internal override returns (IBaseStrategy) {
        EnsoDepositor strategy = new EnsoDepositor();
        PendleLpOracle pendleOracle = new PendleLpOracle(
            15 minutes,
            0x66a1096C6366b2529274dF4f5D8247827fe4CEA8,
            0x1A6fCc85557BC4fB7B534ed835a03EF056552D52
        );
        UniswapV3Oracle uniOracle = new UniswapV3Oracle(
            500,
            15 minutes,
            0x1F98431c8aD98523631AE4a59f267346ea31F984
        );
        CrossOracle oracle = new CrossOracle(address(this));

        OracleStep[] memory oracleSteps = new OracleStep[](2);
        oracleSteps[0] = OracleStep({
            base: vaultAsset,
            quote: underlying,
            oracle: address(uniOracle)
        });
        oracleSteps[1] = OracleStep({
            base: underlying,
            quote: lpToken,
            oracle: address(pendleOracle)
        });

        OracleStep[] memory oracleStepsInverse = new OracleStep[](2);
        oracleStepsInverse[0] = OracleStep({
            base: lpToken,
            quote: underlying,
            oracle: address(pendleOracle)
        });
        oracleStepsInverse[1] = OracleStep({
            base: underlying,
            quote: vaultAsset,
            oracle: address(uniOracle)
        });

        oracle.addOraclePath(vaultAsset, lpToken, oracleSteps);
        oracle.addOraclePath(lpToken, vaultAsset, oracleStepsInverse);

        strategy.initialize(
            testConfig_.asset,
            address(this),
            true,
            abi.encode(
                lpToken,
                ensoRouter,
                address(oracle),
                uint256(100),
                uint256(0)
            )
        );

        aToken = json_.readAddress(
            string.concat(".configs[", index_, "].specific.aToken")
        );

        strategy.initialize(
            testConfig_.asset,
            address(this),
            true,
            abi.encode(
                aToken,
                json_.readAddress(
                    string.concat(".configs[", index_, "].specific.ensoRouter")
                ),
                address(oracle),
                uint256(10),
                uint256(0)
            )
        );

        return IBaseStrategy(address(strategy));
    }

    function _increasePricePerShare(uint256 amount) internal override {
        address lpToken = address(
            EnsoDepositor(address(strategy)).yieldAsset()
        );
        deal(
            lpToken,
            address(strategy),
            IERC20(testConfig.lpToken).balanceOf(address(strategy)) + amount
        );
    }

    /*//////////////////////////////////////////////////////////////
                            AUTODEPOSIT
    //////////////////////////////////////////////////////////////*/

    /// @dev Partially withdraw assets directly from strategy and the underlying protocol
    function test__withdraw_autoDeposit_partial() public override {
        strategy.toggleAutoDeposit();
        _mintAssetAndApproveForStrategy(testConfig.defaultAmount, bob);

        vm.prank(bob);
        strategy.deposit(testConfig.defaultAmount, bob);

        // Push 50% the funds into the underlying protocol
        strategy.pushFunds(0, partialDepositData);

        // Withdraw 80% of deposit
        vm.prank(bob);
        vm.expectRevert();
        strategy.withdraw((testConfig.defaultAmount / 5) * 4, bob, bob);
    }

    /// @dev Partially redeem assets directly from strategy and the underlying protocol
    function test__redeem_autoDeposit_partial() public override {
        strategy.toggleAutoDeposit();
        _mintAssetAndApproveForStrategy(testConfig.defaultAmount, bob);

        vm.prank(bob);
        strategy.deposit(testConfig.defaultAmount, bob);

        // Push 50% the funds into the underlying protocol
        strategy.pushFunds(0, partialDepositData);

        // Redeem 80% of deposit
        vm.prank(bob);
        vm.expectRevert();
        strategy.redeem((testConfig.defaultAmount / 5) * 4, bob, bob);
    }

    /*//////////////////////////////////////////////////////////////
                            PUSH/PULL FUNDS
    //////////////////////////////////////////////////////////////*/

    function test__pushFunds() public override {
        strategy.toggleAutoDeposit();
        _mintAssetAndApproveForStrategy(testConfig.defaultAmount, bob);

        vm.prank(bob);
        strategy.deposit(testConfig.defaultAmount, bob);

        uint256 oldTa = strategy.totalAssets();
        uint256 oldTs = strategy.totalSupply();

        strategy.pushFunds(0, depositData);

        assertEq(
            IERC20(aToken).balanceOf(address(strategy)),
            testConfig.defaultAmount
        );
        assertEq(IERC20(testConfig.asset).balanceOf(address(strategy)), 0);

        assertApproxEqAbs(strategy.totalAssets(), oldTa, _delta_, "ta");
        assertApproxEqAbs(strategy.totalSupply(), oldTs, _delta_, "ts");
        assertApproxEqAbs(
            IERC20(_asset_).balanceOf(address(strategy)),
            0,
            _delta_,
            "strategy asset bal"
        );
    }
    function test__pullFunds() public override {
        _mintAssetAndApproveForStrategy(testConfig.defaultAmount, bob);

        vm.prank(bob);
        strategy.deposit(testConfig.defaultAmount, bob);
        strategy.pushFunds(0, depositData);

        uint256 oldTa = strategy.totalAssets();
        uint256 oldTs = strategy.totalSupply();

        strategy.pullFunds(0, withdrawalData);

        assertEq(IERC20(aToken).balanceOf(address(strategy)), 0);
        assertEq(
            IERC20(testConfig.asset).balanceOf(address(strategy)),
            testConfig.defaultAmount
        );

        assertApproxEqAbs(strategy.totalAssets(), oldTa, _delta_, "ta");
        assertApproxEqAbs(strategy.totalSupply(), oldTs, _delta_, "ts");
        assertApproxEqAbs(
            IERC20(_asset_).balanceOf(address(strategy)),
            testConfig.defaultAmount,
            _delta_,
            "strategy asset bal"
        );
    }
}
