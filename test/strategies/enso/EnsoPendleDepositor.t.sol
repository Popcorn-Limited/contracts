// SPDX-License-Identifier: GPL-3.0
// Docgen-SOLC: 0.8.0
pragma solidity ^0.8.25;

import {EnsoDepositor, IERC20} from "src/strategies/EnsoDepositor.sol";
import {BaseStrategyTest, IBaseStrategy, TestConfig, stdJson} from "../BaseStrategyTest.sol";
import {PendleLpOracle} from "src/peripheral/oracles/adapter/PendleLpOracle.sol";
import {UniswapV3Oracle} from "src/peripheral/oracles/adapter/UniswapV3Oracle.sol";
import {CrossOracle, OracleStep} from "src/peripheral/oracles/adapter/CrossOracle.sol";

contract AaveOracle {
    function getQuote(
        uint256 inAmount,
        address base,
        address quote
    ) external view returns (uint256) {
        return inAmount;
    }
}

contract EnsoPendleDepositorTest is BaseStrategyTest {
    using stdJson for string;

    address vaultAsset = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address underlying = 0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7;
    address lpToken = 0x4f43c77872Db6BA177c270986CD30c3381AF37Ee;
    address ensoRouter = 0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E;

    bytes depositData =
        hex"b35d7e73000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000132e1a7d4d0100ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2f340fa01030001ffffffff01308861a430be4cce5502d0a12724771fc6daf216095ea7b3010201ffffffffff35fa164735182de50811e8e2e824cfb9b6118ac2ea598cb00101ffffffffff01cd5fe23c85820f7b72d0926fc9b05b43e359b7ee095ea7b3010301ffffffffffcd5fe23c85820f7b72d0926fc9b05b43e359b7ee20e8c5650104020105ffff01ac0047886a985071476a1186be89222659970d655b42f5e3810601ffffffff04263833d47ea3fa4a30f269323aba6a107f9eb14c9bd3b227018407ffffffff046675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200104ffffffffff047e7d64d987cab6eed08a191c4c2459daf2f8ed0b4bf6a8f0010408ffffffff08d0af6f692bfa10d6a535a3a321dc8377f4eeef124bf6a8f0010409ffffffff09d0af6f692bfa10d6a535a3a321dc8377f4eeef12095ea7b3010a01ffffffffffac0047886a985071476a1186be89222659970d6570a08231010bffffffffff0af32e58f92e60f4b0a37a69b95d642a471365eae858bda475c1000000000000ff00000000005bbb0ef59571e58418f9a4357b68a00b0601050809040c0d8effffffffffffffffffffffffffffffffffffffffffff70a08231010bffffffffff0bf32e58f92e60f4b0a37a69b95d642a471365eae8b67d77c5010b0affffffff0bca99eaa38e8f37a168214a3a57c9a45a58563ed56e7a43a3010b0fffffffff0b7e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c5912010bffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000093621dca56fe26cdee86e4f6b18e116e9758ff110000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cd5fe23c85820f7b72d0926fc9b05b43e359b7ee0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ac0047886a985071476a1186be89222659970d6500000000000000000000000000000000000000000000000000000000000000200000000000000000000000007d585b0e27bbb3d981b7757115ec11f47c476994000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f32e58f92e60f4b0a37a69b95d642a471365eae800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000025e400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002cec000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000062f84d444c2dc7d";

    bytes withdrawalData =
        hex"b35d7e73000000000000000000000000f32e58f92e60f4b0a37a69b95d642a471365eae800000000000000000000000000000000000000000000000006607e45be292000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000008095ea7b3010001fffffffffff32e58f92e60f4b0a37a69b95d642a471365eae819198595a30283ffffffff83111111125421ca6dc452d289314280a0f8842a659bd3b227018302ffffffff036675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200103ffffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0bd0e30db00303ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2a9059cbb010403ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc26e7a43a3010305ffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120103ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000000007c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000111111125421ca6dc452d289314280a0f8842a65000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000006607e45be2920000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005c807ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000f32e58f92e60f4b0a37a69b95d642a471365eae8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000007d585b0e27bbb3d981b7757115ec11f47c47699400000000000000000000000000000000000000000000000006607e45be292000000000000000000000000000000000000000000000000000000fd5cea773720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000046200000000000000000000000000044400042a0003fc0003e20003cc00039051201111111254eeb25477b68fb85ed929f73a960582f32e58f92e60f4b0a37a69b95d642a471365eae8008462e238bb00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000fd5cea77372000000000000000000000000000000000000000000000000000000002cbcba5d70000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000f32e58f92e60f4b0a37a69b95d642a471365eae8000000000000000000000000424b35ea4bbb73b8c769d986cd424595dd2aeee30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fa3b41f0c7dba6000000000000000000000000000000000000000000000000c5bf25c20e11c760000000a4000000a4000000a4000000a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000a4bf15fcd8000000000000000000000000303389f541ff2d620e42832f180a08e767b28e10000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000242cc2878d006790014200000000000000424b35ea4bbb73b8c769d986cd424595dd2aeee3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000403c81b2e61858ffd2cc26ff16c25f522f29b8cc9a9e6142338a1e3e1fce8e1648fb56f9b28991a5eb8cd321ba0d5bfca174b426734b5013bea83744a3e38c276a00000000000000000000000000000000000000000000000000000000000000004101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c061111111125421ca6dc452d289314280a0f8842a650020d6bdbf78f32e58f92e60f4b0a37a69b95d642a471365eae880a06c4eca27f32e58f92e60f4b0a37a69b95d642a471365eae87d585b0e27bbb3d981b7757115ec11f47c47699400206b4be0b9111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000097864b9100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000fd5cea7737200";

    function setUp() public {
        _setUpBaseTest(
            0,
            "./test/strategies/enso/EnsoPendleDepositorTestConfig.json"
        );
    }

    function _setUpStrategy(
        string memory json_,
        string memory index_,
        TestConfig memory testConfig_
    ) internal override returns (IBaseStrategy) {
        EnsoDepositor strategy = new EnsoDepositor();
        PendleLpOracle pendleOracle = new PendleLpOracle(
            15 minutes,
            0x66a1096C6366b2529274dF4f5D8247827fe4CEA8,
            0x1A6fCc85557BC4fB7B534ed835a03EF056552D52
        );
        UniswapV3Oracle uniOracle = new UniswapV3Oracle(
            500,
            15 minutes,
            0x1F98431c8aD98523631AE4a59f267346ea31F984
        );
        CrossOracle oracle = new CrossOracle(address(this));

        OracleStep[] memory oracleSteps = new OracleStep[](2);
        oracleSteps[0] = OracleStep({
            base: vaultAsset,
            quote: underlying,
            oracle: address(uniOracle)
        });
        oracleSteps[1] = OracleStep({
            base: underlying,
            quote: lpToken,
            oracle: address(pendleOracle)
        });

        OracleStep[] memory oracleStepsInverse = new OracleStep[](2);
        oracleStepsInverse[0] = OracleStep({
            base: lpToken,
            quote: underlying,
            oracle: address(pendleOracle)
        });
        oracleStepsInverse[1] = OracleStep({
            base: underlying,
            quote: vaultAsset,
            oracle: address(uniOracle)
        });

        oracle.setOraclePath(vaultAsset, lpToken, oracleSteps);
        oracle.setOraclePath(lpToken, vaultAsset, oracleStepsInverse);

        strategy.initialize(
            testConfig_.asset,
            address(this),
            true,
            abi.encode(
                lpToken,
                ensoRouter,
                address(oracle),
                uint256(100),
                uint256(0)
            )
        );

        return IBaseStrategy(address(strategy));
    }

    function test__basic() public {
        _mintAssetAndApproveForStrategy(1e18, bob);

        vm.prank(bob);
        strategy.deposit(1e18, bob);

        emit log_string("Balances after deposit:");
        emit log_named_uint(
            "lpToken: ",
            IERC20(lpToken).balanceOf(address(strategy))
        );
        emit log_named_uint(
            "asset: ",
            IERC20(underlying).balanceOf(address(strategy))
        );

        strategy.pushFunds(0, depositData);

        emit log_string("Balances after push:");
        emit log_named_uint(
            "lpToken: ",
            IERC20(lpToken).balanceOf(address(strategy))
        );
        emit log_named_uint(
            "asset: ",
            IERC20(underlying).balanceOf(address(strategy))
        );

        strategy.pullFunds(0, withdrawalData);

        emit log_string("Balances after pull:");
        emit log_named_uint(
            "lpToken: ",
            IERC20(lpToken).balanceOf(address(strategy))
        );
        emit log_named_uint(
            "asset: ",
            IERC20(underlying).balanceOf(address(strategy))
        );

        vm.prank(bob);
        strategy.withdraw(1e18, bob, bob);

        emit log_string("Balances after withdraw:");
        emit log_named_uint(
            "lpToken: ",
            IERC20(lpToken).balanceOf(address(strategy))
        );
        emit log_named_uint(
            "asset: ",
            IERC20(underlying).balanceOf(address(strategy))
        );
    }

    // function _increasePricePerShare(uint256 amount) internal override {
    //     address lpToken = address(AaveV3Depositor(address(strategy)).lpToken());
    //     deal(
    //         testConfig.asset,
    //         lpToken,
    //         IERC20(testConfig.asset).balanceOf(lpToken) + amount
    //     );
    // }
}
