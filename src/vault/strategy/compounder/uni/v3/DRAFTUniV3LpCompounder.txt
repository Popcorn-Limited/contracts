// SPDX-License-Identifier: GPL-3.0
// Docgen-SOLC: 0.8.15

pragma solidity ^0.8.15;

import {ERC4626Upgradeable as ERC4626, ERC20Upgradeable as ERC20, IERC20Upgradeable as IERC20} from "openzeppelin-contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol";
import {IAdapter} from "../../../interfaces/vault/IAdapter.sol";
import {IWithRewards} from "../../../interfaces/vault/IWithRewards.sol";
import {StrategyBase} from "../StrategyBase.sol";
import {UniswapV3Utils} from "../../../utils/UniswapV3Utils.sol";

contract UniV3Compounder is UniV3Compounder {
    // Events
    event Harvest();

    // Errors
    error InvalidConfig();

    function _verifyLpToken() internal override {
        toAssetRoute[toAssetRoute.length - 1] == lp0;
        toAssetRoute2[toAssetRoute2.length - 1] == lp1
    }

    function _setUpLpToken() internal override {
                IERC20(baseAsset).approve(router, type(uint256).max);

        asset1.safeApprove(address(pool), _amount);
                asset2.safeApprove(address(pool), _amount);

    }

    function _getLpToken() internal override {
        uint256 amount = IERC20(baseAsset).balanceOf(address(this));

        UniswapV3Utils.swap(
            router,
            toAssetPath,
            amount / 2
        );
        UniswapV3Utils.swap(
            router,
            toAssetPath,
            amount / 2
        );
        pool.addLiquidity(poolId, _amount, address(this));
    }

    function _verifyAsset(
        address baseAsset,
        bytes memory toAssetPath,
        bytes memory optionalData
    ) internal override {
        address[] memory toAsset0Route = UniswapV3Utils.pathToRoute(toAssetPath);
        address[] memory toAsset1Route = UniswapV3Utils.pathToRoute(optionalData);
        if (toAsset0Route[0] != baseAsset || toAsset1Route[0] != baseAsset) revert InvalidConfig();
        if (
            toAsset0Route[toAsset0Route.length - 1] !=
            poolAsset0 || toAsset1Route[toAsset1Route.length - 1] !=
            poolAsset0
        ) revert InvalidConfig();
    }

    function _setUpAsset(
        address baseAsset,
        address router,
        bytes memory optionalData
    ) internal override {
        IERC20(baseAsset).approve(router, type(uint256).max);

        IERC20(poolAsset0).approve(pool,type(uint256).max);
                IERC20(poolAsset1).approve(pool,type(uint256).max);

    }

    function _getAsset(
        address baseAsset,
        address router,
        bytes memory toAssetPath,
        bytes memory optionalData
    ) internal override {
        uint256 bal = IERC20(baseAsset).balanceOf(address(this));

        // Trade base asset for asset
        UniswapV3Utils.swap(
            router,
            toAssetPath,
            bal / 2
        );
         UniswapV3Utils.swap(
            router,
            optionalData,
            bal / 2
        );
        pool.addLiquidity();
    }
}
